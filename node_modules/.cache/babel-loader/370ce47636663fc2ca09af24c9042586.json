{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Josepha\\\\Desktop\\\\react-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Josepha\\\\Desktop\\\\react-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Josepha\\\\Desktop\\\\react-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Josepha\\\\Desktop\\\\react-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Josepha\\\\Desktop\\\\react-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Josepha\\\\Desktop\\\\react-calculator\\\\src\\\\components\\\\Keypad.jsx\";\n// ---------- Keypad.jsx ----------\nimport React, { Component } from \"react\";\n\nvar Keypad =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Keypad, _Component);\n\n  function Keypad() {\n    _classCallCheck(this, Keypad);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Keypad).apply(this, arguments));\n  }\n\n  _createClass(Keypad, [{\n    key: \"handleClick\",\n    // Rufe über die props die onKeyClick()-Funktion des jeweiligen Event-Auslösers (= Button) auf\n    value: function handleClick(e) {\n      this.props.onKeyClick(e.target.value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      // Styling für die Buttons:\n      var keyStyle = {\n        backgroundColor: \"#20232a\",\n        color: \"#61dafb\",\n        border: \"2px solid #61dafb\",\n        padding: \"3px\",\n        margin: \"5px\",\n        borderRadius: \"8px\",\n        width: \"50px\",\n        height: \"50px\",\n        fontFamily: \"Roboto, sans-serif\"\n      }; // Array, das die Werte der Buttons enthält:\n\n      var keyValues = [\"(\", \"CE\", \")\", \"C\", \"1\", \"2\", \"3\", \"+\", \"4\", \"5\", \"6\", \"-\", \"7\", \"8\", \"9\", \"*\", \".\", \"0\", \"=\", \"/\"]; // Deklariere ein leeres Array zur Speicherung der fertigen Buttons\n\n      var keyArray = []; // Für jeden Eintrag des Werte-Arrays...\n\n      for (var i = 0; i <= 19; i++) {\n        // ... füge einen neuen Button mit dem entsprechenden Wert aus dem Werte-Array zum Button-Array hinzu\n        keyArray.push(React.createElement(\"button\", {\n          value: keyValues[i],\n          style: keyStyle,\n          onClick: function onClick(e) {\n            return _this.handleClick(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, keyValues[i]));\n      } // Verpacke das Button-Array in einen div und gebe es zurück\n\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, keyArray);\n    }\n  }]);\n\n  return Keypad;\n}(Component);\n\nexport default Keypad;","map":{"version":3,"sources":["C:\\Users\\Josepha\\Desktop\\react-calculator\\src\\components\\Keypad.jsx"],"names":["React","Component","Keypad","e","props","onKeyClick","target","value","keyStyle","backgroundColor","color","border","padding","margin","borderRadius","width","height","fontFamily","keyValues","keyArray","i","push","handleClick"],"mappings":";;;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,M;;;;;;;;;;;;;AACJ;gCACYC,C,EAAG;AACb,WAAKC,KAAL,CAAWC,UAAX,CAAsBF,CAAC,CAACG,MAAF,CAASC,KAA/B;AACD;;;6BAEQ;AAAA;;AACP;AACA,UAAIC,QAAQ,GAAG;AACbC,QAAAA,eAAe,EAAE,SADJ;AAEbC,QAAAA,KAAK,EAAE,SAFM;AAGbC,QAAAA,MAAM,EAAE,mBAHK;AAIbC,QAAAA,OAAO,EAAE,KAJI;AAKbC,QAAAA,MAAM,EAAE,KALK;AAMbC,QAAAA,YAAY,EAAE,KAND;AAObC,QAAAA,KAAK,EAAE,MAPM;AAQbC,QAAAA,MAAM,EAAE,MARK;AASbC,QAAAA,UAAU,EAAE;AATC,OAAf,CAFO,CAaP;;AACA,UAAIC,SAAS,GAAG,CACd,GADc,EAEd,IAFc,EAGd,GAHc,EAId,GAJc,EAKd,GALc,EAMd,GANc,EAOd,GAPc,EAQd,GARc,EASd,GATc,EAUd,GAVc,EAWd,GAXc,EAYd,GAZc,EAad,GAbc,EAcd,GAdc,EAed,GAfc,EAgBd,GAhBc,EAiBd,GAjBc,EAkBd,GAlBc,EAmBd,GAnBc,EAoBd,GApBc,CAAhB,CAdO,CAoCP;;AACA,UAAIC,QAAQ,GAAG,EAAf,CArCO,CAsCP;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B;AACAD,QAAAA,QAAQ,CAACE,IAAT,CACE;AACE,UAAA,KAAK,EAAEH,SAAS,CAACE,CAAD,CADlB;AAEE,UAAA,KAAK,EAAEZ,QAFT;AAGE,UAAA,OAAO,EAAE,iBAAAL,CAAC;AAAA,mBAAI,KAAI,CAACmB,WAAL,CAAiBnB,CAAjB,CAAJ;AAAA,WAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKGe,SAAS,CAACE,CAAD,CALZ,CADF;AASD,OAlDM,CAmDP;;;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMD,QAAN,CAAP;AACD;;;;EA3DkBlB,S;;AA8DrB,eAAeC,MAAf","sourcesContent":["// ---------- Keypad.jsx ----------\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass Keypad extends Component {\r\n  // Rufe über die props die onKeyClick()-Funktion des jeweiligen Event-Auslösers (= Button) auf\r\n  handleClick(e) {\r\n    this.props.onKeyClick(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    // Styling für die Buttons:\r\n    let keyStyle = {\r\n      backgroundColor: \"#20232a\",\r\n      color: \"#61dafb\",\r\n      border: \"2px solid #61dafb\",\r\n      padding: \"3px\",\r\n      margin: \"5px\",\r\n      borderRadius: \"8px\",\r\n      width: \"50px\",\r\n      height: \"50px\",\r\n      fontFamily: \"Roboto, sans-serif\"\r\n    };\r\n    // Array, das die Werte der Buttons enthält:\r\n    let keyValues = [\r\n      \"(\",\r\n      \"CE\",\r\n      \")\",\r\n      \"C\",\r\n      \"1\",\r\n      \"2\",\r\n      \"3\",\r\n      \"+\",\r\n      \"4\",\r\n      \"5\",\r\n      \"6\",\r\n      \"-\",\r\n      \"7\",\r\n      \"8\",\r\n      \"9\",\r\n      \"*\",\r\n      \".\",\r\n      \"0\",\r\n      \"=\",\r\n      \"/\"\r\n    ];\r\n    // Deklariere ein leeres Array zur Speicherung der fertigen Buttons\r\n    var keyArray = [];\r\n    // Für jeden Eintrag des Werte-Arrays...\r\n    for (var i = 0; i <= 19; i++) {\r\n      // ... füge einen neuen Button mit dem entsprechenden Wert aus dem Werte-Array zum Button-Array hinzu\r\n      keyArray.push(\r\n        <button\r\n          value={keyValues[i]}\r\n          style={keyStyle}\r\n          onClick={e => this.handleClick(e)}\r\n        >\r\n          {keyValues[i]}\r\n        </button>\r\n      );\r\n    }\r\n    // Verpacke das Button-Array in einen div und gebe es zurück\r\n    return <div>{keyArray}</div>;\r\n  }\r\n}\r\n\r\nexport default Keypad;\r\n"]},"metadata":{},"sourceType":"module"}